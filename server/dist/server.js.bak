"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const dotenv = __importStar(require("dotenv"));
const cors_1 = __importDefault(require("cors"));
const morgan_1 = __importDefault(require("morgan"));
const path_1 = __importDefault(require("path"));
const db_1 = __importDefault(require("./config/db"));
const bookRoutes_1 = __importDefault(require("./routes/bookRoutes"));
const userRoutes_1 = __importDefault(require("./routes/userRoutes"));
const orderRoutes_1 = __importDefault(require("./routes/orderRoutes"));
const categoryRoutes_1 = __importDefault(require("./routes/categoryRoutes"));
const reviewRoutes_1 = __importDefault(require("./routes/reviewRoutes"));
const colors = __importStar(require("colors"));
// Cài đặt env
dotenv.config();
// Khởi tạo kết nối DB
(0, db_1.default)();
const app = (0, express_1.default)();
// Middleware cơ bản
app.use(express_1.default.json());
app.use((0, cors_1.default)());
// Sử dụng middleware Morgan trong môi trường development
if (process.env.NODE_ENV === "development") {
    app.use((0, morgan_1.default)("dev"));
}
// Cấu hình phục vụ file tĩnh
// Kiểm tra và sử dụng __dirname nếu đã có sẵn trong môi trường
const currentDir = path_1.default.resolve();
console.log("Đường dẫn hiện tại:", currentDir);
console.log("Đường dẫn public:", path_1.default.join(currentDir, "public"));
// Phục vụ thư mục public cho các file tĩnh
app.use("/public", express_1.default.static(path_1.default.join(currentDir, "public")));
app.use("/images", express_1.default.static(path_1.default.join(currentDir, "public", "images")));
// Routes
app.use("/api/books", bookRoutes_1.default);
app.use("/api/users", userRoutes_1.default);
app.use("/api/orders", orderRoutes_1.default);
app.use("/api/categories", categoryRoutes_1.default);
app.use("/api/reviews", reviewRoutes_1.default);
// Thêm route trực tiếp cho /categories và /books/featured
app.use("/categories", (req, res) => {
    req.url = "/api/categories" + req.url;
    app._router.handle(req, res);
});
app.use("/books/featured", (req, res) => {
    req.url = "/api/books/featured" + req.url;
    app._router.handle(req, res);
});
// Thêm route trực tiếp cho /users và các đường dẫn con
app.use("/users", (req, res) => {
    req.url = "/api" + req.originalUrl;
    console.log(`Chuyển hướng từ ${req.originalUrl} đến ${req.url}`);
    app._router.handle(req, res);
});
// Thêm route trực tiếp cho /books
app.use("/books", (req, res, next) => {
    // Nếu là /books/featured thì bỏ qua vì đã xử lý ở trên
    if (req.originalUrl.startsWith("/books/featured")) {
        return next();
    }
    // Nếu có ID trong đường dẫn
    if (req.originalUrl.match(/^\/books\/[^\/]+$/)) {
        const id = req.originalUrl.split("/")[2];
        req.url = `/api/books/${id}`;
        console.log(`Chuyển hướng từ ${req.originalUrl} đến ${req.url}`);
        return app._router.handle(req, res);
    }
    // Nếu có reviews trong đường dẫn
    if (req.originalUrl.match(/^\/books\/[^\/]+\/reviews$/)) {
        const id = req.originalUrl.split("/")[2];
        req.url = `/api/books/${id}/reviews`;
        console.log(`Chuyển hướng từ ${req.originalUrl} đến ${req.url}`);
        return app._router.handle(req, res);
    }
    // Mặc định
    req.url = "/api" + req.originalUrl;
    console.log(`Chuyển hướng từ ${req.originalUrl} đến ${req.url}`);
    app._router.handle(req, res);
});
// Route kiểm tra API
app.get("/api", (req, res) => {
    res.json({ message: "API đang hoạt động" });
});
// Middleware xử lý lỗi MongoDB
app.use((err, req, res, next) => {
    if (err.name === "MongoError" || err.name === "MongoServerSelectionError") {
        console.error(colors.red(`Lỗi MongoDB: ${err.message}`));
        return res.status(500).json({
            message: "Lỗi kết nối đến máy chủ dữ liệu. Vui lòng kiểm tra kết nối MongoDB của bạn hoặc thử lại sau.",
            error: err.message,
        });
    }
    next(err);
});
// Middleware xử lý lỗi 404
app.use((req, res) => {
    res.status(404).json({ message: "Route không tồn tại" });
});
// Kiểm tra cổng đã được sử dụng chưa
const checkPort = (port) => {
    return new Promise((resolve, reject) => {
        // Tạo server tạm để kiểm tra cổng
        const server = require("http").createServer();
        server.on("error", (err) => {
            if (err.code === "EADDRINUSE") {
                console.log(colors.yellow(`Cổng ${port} đã được sử dụng, đang thử cổng ${port + 1}`));
                resolve(checkPort(port + 1)); // Thử cổng kế tiếp
            }
            else {
                reject(err);
            }
        });
        server.on("listening", () => {
            server.close();
            resolve(port);
        });
        server.listen(port);
    });
};
// Khởi động server với kiểm tra cổng
let PORT = process.env.PORT ? parseInt(process.env.PORT) : 5001;
checkPort(PORT)
    .then((availablePort) => {
    PORT = availablePort;
    app.listen(PORT, () => {
        console.log(colors.yellow.bold(`Server đang chạy ở chế độ ${process.env.NODE_ENV}`));
        console.log(colors.cyan.bold(`Server đang chạy tại http://localhost:${PORT}`));
    });
})
    .catch((err) => {
    console.error(colors.red(`Không thể khởi động server: ${err.message}`));
});
